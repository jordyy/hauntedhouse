{
  "version": 3,
  "sources": ["../../perlin-noise/index.js"],
  "sourcesContent": ["exports.generatePerlinNoise = generatePerlinNoise;\nexports.generateWhiteNoise = generateWhiteNoise;\n\nfunction generatePerlinNoise(width, height, options) {\n  options = options || {};\n  var octaveCount = options.octaveCount || 4;\n  var amplitude = options.amplitude || 0.1;\n  var persistence = options.persistence || 0.2;\n  var whiteNoise = generateWhiteNoise(width, height);\n\n  var smoothNoiseList = new Array(octaveCount);\n  var i;\n  for (i = 0; i < octaveCount; ++i) {\n    smoothNoiseList[i] = generateSmoothNoise(i);\n  }\n  var perlinNoise = new Array(width * height);\n  var totalAmplitude = 0;\n  // blend noise together\n  for (i = octaveCount - 1; i >= 0; --i) {\n    amplitude *= persistence;\n    totalAmplitude += amplitude;\n\n    for (var j = 0; j < perlinNoise.length; ++j) {\n      perlinNoise[j] = perlinNoise[j] || 0;\n      perlinNoise[j] += smoothNoiseList[i][j] * amplitude;\n    }\n  }\n  // normalization\n  for (i = 0; i < perlinNoise.length; ++i) {\n      perlinNoise[i] /= totalAmplitude;\n  }\n\n  return perlinNoise;\n\n  function generateSmoothNoise(octave) {\n    var noise = new Array(width * height);\n    var samplePeriod = Math.pow(2, octave);\n    var sampleFrequency = 1 / samplePeriod;\n    var noiseIndex = 0;\n    for (var y = 0; y < height; ++y) {\n      var sampleY0 = Math.floor(y / samplePeriod) * samplePeriod;\n      var sampleY1 = (sampleY0 + samplePeriod) % height;\n      var vertBlend = (y - sampleY0) * sampleFrequency;\n      for (var x = 0; x < width; ++x) {\n        var sampleX0 = Math.floor(x / samplePeriod) * samplePeriod;\n        var sampleX1 = (sampleX0 + samplePeriod) % width;\n        var horizBlend = (x - sampleX0) * sampleFrequency;\n\n        // blend top two corners\n        var top = interpolate(whiteNoise[sampleY0 * width + sampleX0], whiteNoise[sampleY1 * width + sampleX0], vertBlend);\n        // blend bottom two corners\n        var bottom = interpolate(whiteNoise[sampleY0 * width + sampleX1], whiteNoise[sampleY1 * width + sampleX1], vertBlend);\n        // final blend\n        noise[noiseIndex] = interpolate(top, bottom, horizBlend);\n        noiseIndex += 1;\n      }\n    }\n    return noise;\n  }\n}\nfunction generateWhiteNoise(width, height) {\n  var noise = new Array(width * height);\n  for (var i = 0; i < noise.length; ++i) {\n    noise[i] = Math.random();\n  }\n  return noise;\n}\nfunction interpolate(x0, x1, alpha) {\n  return x0 * (1 - alpha) + alpha * x1;\n}\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,YAAQ,sBAAsB;AAC9B,YAAQ,qBAAqB;AAE7B,aAAS,oBAAoB,OAAO,QAAQ,SAAS;AACnD,gBAAU,WAAW,CAAC;AACtB,UAAI,cAAc,QAAQ,eAAe;AACzC,UAAI,YAAY,QAAQ,aAAa;AACrC,UAAI,cAAc,QAAQ,eAAe;AACzC,UAAI,aAAa,mBAAmB,OAAO,MAAM;AAEjD,UAAI,kBAAkB,IAAI,MAAM,WAAW;AAC3C,UAAI;AACJ,WAAK,IAAI,GAAG,IAAI,aAAa,EAAE,GAAG;AAChC,wBAAgB,CAAC,IAAI,oBAAoB,CAAC;AAAA,MAC5C;AACA,UAAI,cAAc,IAAI,MAAM,QAAQ,MAAM;AAC1C,UAAI,iBAAiB;AAErB,WAAK,IAAI,cAAc,GAAG,KAAK,GAAG,EAAE,GAAG;AACrC,qBAAa;AACb,0BAAkB;AAElB,iBAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,EAAE,GAAG;AAC3C,sBAAY,CAAC,IAAI,YAAY,CAAC,KAAK;AACnC,sBAAY,CAAC,KAAK,gBAAgB,CAAC,EAAE,CAAC,IAAI;AAAA,QAC5C;AAAA,MACF;AAEA,WAAK,IAAI,GAAG,IAAI,YAAY,QAAQ,EAAE,GAAG;AACrC,oBAAY,CAAC,KAAK;AAAA,MACtB;AAEA,aAAO;AAEP,eAAS,oBAAoB,QAAQ;AACnC,YAAI,QAAQ,IAAI,MAAM,QAAQ,MAAM;AACpC,YAAI,eAAe,KAAK,IAAI,GAAG,MAAM;AACrC,YAAI,kBAAkB,IAAI;AAC1B,YAAI,aAAa;AACjB,iBAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,cAAI,WAAW,KAAK,MAAM,IAAI,YAAY,IAAI;AAC9C,cAAI,YAAY,WAAW,gBAAgB;AAC3C,cAAI,aAAa,IAAI,YAAY;AACjC,mBAAS,IAAI,GAAG,IAAI,OAAO,EAAE,GAAG;AAC9B,gBAAI,WAAW,KAAK,MAAM,IAAI,YAAY,IAAI;AAC9C,gBAAI,YAAY,WAAW,gBAAgB;AAC3C,gBAAI,cAAc,IAAI,YAAY;AAGlC,gBAAI,MAAM,YAAY,WAAW,WAAW,QAAQ,QAAQ,GAAG,WAAW,WAAW,QAAQ,QAAQ,GAAG,SAAS;AAEjH,gBAAI,SAAS,YAAY,WAAW,WAAW,QAAQ,QAAQ,GAAG,WAAW,WAAW,QAAQ,QAAQ,GAAG,SAAS;AAEpH,kBAAM,UAAU,IAAI,YAAY,KAAK,QAAQ,UAAU;AACvD,0BAAc;AAAA,UAChB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AACA,aAAS,mBAAmB,OAAO,QAAQ;AACzC,UAAI,QAAQ,IAAI,MAAM,QAAQ,MAAM;AACpC,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACrC,cAAM,CAAC,IAAI,KAAK,OAAO;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AACA,aAAS,YAAY,IAAI,IAAI,OAAO;AAClC,aAAO,MAAM,IAAI,SAAS,QAAQ;AAAA,IACpC;AAAA;AAAA;",
  "names": []
}
